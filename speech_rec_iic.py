# -*- coding: utf-8 -*-
"""speech_rec_IIC.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OchT6uDqr-DuETyWHr5ksKo52_c8Xtsg
"""

import subprocess

def run_command(command):
    """Run a shell command and print its output"""
    try:
        result = subprocess.run(command, shell=True, check=True, text=True, capture_output=True)
        print(result.stdout)
    except subprocess.CalledProcessError as e:
        print(f"An error occurred: {e.stderr}")

# List of commands to run
commands = [
    "sudo apt-get update",
    "sudo apt-get install -y espeak",
    "sudo apt-get install -y espeak libespeak1",
    "sudo apt-get install -y espeak libespeak1 portaudio19-dev",
    "pip install speechrecognition pyttsx3 gtts playsound pyaudio",
    "sudo apt-get install -y portaudio19-dev",
    "pip install pyaudio"
]

# Run each command
for command in commands:
    run_command(command)

"""import subprocess
import sys

# Essential libraries for speech recognition and NLP
libraries = [
    'speech_recognition',   # For speech recognition
    'pyaudio',              # To capture audio from the microphone
    'gtts',                 # Google Text-to-Speech
    'pyttsx3',              # Text-to-speech conversion
    'pocketsphinx',         # Offline speech recognition
    'nltk',                 # Natural Language Toolkit
    'spacy',                # Industrial-strength NLP
    'transformers',         # State-of-the-art Natural Language Processing for Pytorch and TensorFlow 2.0
    'torch',                # PyTorch for deep learning
    'tensorflow',           # TensorFlow for deep learning
    'keras',                # High-level neural networks API
    'requests',             # For making HTTP requests
    'flask',                # For creating a web-based chatbot interface
    'django',               # For creating more complex web applications
    'openai',               # OpenAI API for language models
    'webrtcvad',            # Voice Activity Detection
    'wave',                 # For reading WAV files
    'librosa',              # For audio and music processing
    'pydub',                # For manipulating audio
    'scipy',                # Scientific computing
    'numpy',                # Numerical computing
    'matplotlib',           # Plotting and visualization
    'pandas',               # Data analysis and manipulation
    'pyyaml',               # For reading configuration files
    'jupyter',              # For creating interactive notebooks
    'pytest',
    'nltk'
    # For testing
]

#install prerequites

# Import libraries after ensuring installation
try:
  import speech_recognition as sr
  import pyaudio
  import pyttsx3
  import nltk
  import spacy
  import transformers
  import torch
  import tensorflow as tf
  import keras
  import requests
  import flask
  import wave
  import librosa
  import scipy
  import numpy as np
  import matplotlib.pyplot as plt
  import pandas as pd
  import yaml
  import jupyter
  import pytest
  import nltk
except:
  for lib in libraries:
    pip install lib

  import speech_recognition as sr
  import pyaudio
  import pyttsx3
  import nltk
  import spacy
  import transformers
  import torch
  import tensorflow as tf
  import keras
  import requests
  import flask
  import wave
  import librosa
  import scipy
  import numpy as np
  import matplotlib.pyplot as plt
  import pandas as pd
  import yaml
  import jupyter
  import pytest
  import nltk"""


import subprocess
import sys

# Essential libraries for speech recognition and NLP
libraries = [
    'speechrecognition',   # For speech recognition
    'pyaudio',             # To capture audio from the microphone
    'gtts',                # Google Text-to-Speech
    'pyttsx3',             # Text-to-speech conversion
    'pocketsphinx',        # Offline speech recognition
    'nltk',                # Natural Language Toolkit
    'spacy',               # Industrial-strength NLP
    'transformers',        # State-of-the-art Natural Language Processing for Pytorch and TensorFlow 2.0
    'torch',               # PyTorch for deep learning
    'tensorflow',          # TensorFlow for deep learning
    'keras',               # High-level neural networks API
    'requests',            # For making HTTP requests
    'flask',               # For creating a web-based chatbot interface
    'django',              # For creating more complex web applications
    'openai',              # OpenAI API for language models
    'webrtcvad',           # Voice Activity Detection
    'wave',                # For reading WAV files
    'librosa',             # For audio and music processing
    'pydub',               # For manipulating audio
    'scipy',               # Scientific computing
    'numpy',               # Numerical computing
    'matplotlib',          # Plotting and visualization
    'pandas',              # Data analysis and manipulation
    'pyyaml',              # For reading configuration files
    'jupyter',             # For creating interactive notebooks
    'pytest',              # For testing
]

def install_library(lib):
    """Install a Python library using pip"""
    subprocess.check_call([sys.executable, "-m", "pip", "install", lib])

# Install missing libraries
for lib in libraries:
    try:
        __import__(lib)
    except ImportError:
        install_library(lib)

# Now import the libraries
import speech_recognition as sr
import pyaudio
import pyttsx3
import gtts
import pocketsphinx
import nltk
import spacy
import transformers
import torch
import tensorflow as tf
import keras
import requests
import flask
import django
import openai
import webrtcvad
import wave
import librosa
import pydub
import scipy
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import yaml
import jupyter
import pytest

print("All libraries installed and imported successfully!")

import speech_recognition as sr

recognizer = sr.Recognizer()

try:
    with sr.Microphone() as source:
        print("Microphone is working!")
except OSError as e:
    print(f"Microphone error: {e}")

# Install pyttsx3 dependencies
"""
!sudo apt-get update
!sudo apt-get install espeak

!sudo apt-get update
!sudo apt-get install espeak libespeak1

!sudo apt-get update
!sudo apt-get install espeak libespeak1 portaudio19-dev
!pip install speechrecognition pyttsx3 gtts playsound pyaudio

!pip install speechrecognition pyttsx3 gtts playsound

# Install Python packages
!pip install speechrecognition pyttsx3 gtts playsound pyaudio

!sudo apt-get install portaudio19-dev
!pip install pyaudio"""


import sys
import os
import speech_recognition as sr

def init_pyttsx3():
    try:
        import pyttsx3
        tts_engine = pyttsx3.init()
        return tts_engine, True
    except ImportError:
        print("pyttsx3 is not installed. Please install it by running 'pip install pyttsx3'.")
        return None, False
    except OSError as e:
        print(f"pyttsx3 initialization failed: {e}")
        return None, False

def init_gtts():
    try:
        from gtts import gTTS
        import playsound
        return gTTS, playsound, True
    except ImportError as e:
        print(f"gtts or playsound is not installed. Please install them by running 'pip install gtts playsound'.")
        return None, None, False

def speak_pyttsx3(tts_engine, text):
    tts_engine.say(text)
    tts_engine.runAndWait()

def speak_gtts(gTTS, playsound, text):
    tts = gTTS(text=text, lang='en')
    tts.save("temp.mp3")
    playsound.playsound("temp.mp3")
    os.remove("temp.mp3")

def recognize_speech():
    recognizer = sr.Recognizer()
    with sr.Microphone() as source:
      print("Listening...")
      audio = recognizer.listen(source)
    try:
        print("Recognizing...")
        text = recognizer.recognize_google(audio)
        print(f"User said: {text}")
        return text
    except sr.UnknownValueError:
        print("Sorry, I did not understand that.")
        return None
    except sr.RequestError:
        print("Could not request results from Google Speech Recognition service.")
        return None
    except OSError as e:
        print(f"Microphone error: {e}")
        return None

def main():
    tts_engine, pyttsx3_available = init_pyttsx3()
    if not pyttsx3_available:
        gTTS, playsound, gtts_available = init_gtts()
        if not gtts_available:
            print("No TTS engine available. Please ensure pyttsx3 or gtts and playsound are installed.")
            sys.exit(1)
        speak = lambda text: speak_gtts(gTTS, playsound, text)
    else:
        speak = lambda text: speak_pyttsx3(tts_engine, text)

    print("Say 'exit' to stop the program.")
    while True:
        user_input = recognize_speech()
        if user_input is None:
            continue

        if "Hi Isa!" in user_input:
            response = "Hello! How can I help you today?"
            print(f"Bot: {response}")
            speak(response)

        if "exit" in user_input.lower():
            print("Exiting...")
            break

if __name__ == "__main__":
    main()

input("Press Enter to exit...")

!sudo apt-get update
!sudo apt-get install -y espeak libespeak1
!sudo apt-get install espeak libespeak1 portaudio19-dev

!sudo apt-get install espeak
!sudo apt-get install espeak libespeak1

!rasa run actions
!rasa run

!pip install speechrecognition pyttsx3 gtts playsound pyaudio
!pip install speechrecognition pyttsx3 gtts playsound

!sudo apt-get install portaudio19-dev
!pip install pyaudio

import subprocess
import sys
import requests
import pyttsx3

# Ensure the required packages are installed
def install(package):
    subprocess.check_call([sys.executable, "-m", "pip", "install", package])

# Ensure the required system dependencies are installed
def install_system_dependencies():
    subprocess.check_call(["sudo", "apt-get", "update"])
    subprocess.check_call(["sudo", "apt-get", "install", "-y", "espeak", "libespeak1"])

# Install system dependencies
install_system_dependencies()

# List of required packages
required_packages = ["pyttsx3", "requests"]

for package in required_packages:
    try:
        __import__(package)
    except ImportError:
        install(package)

def init_speech_engine():
    """Initialize the text-to-speech engine."""
    engine = pyttsx3.init()
    engine.setProperty('rate', 150)  # Speed percent (can go over 100)
    engine.setProperty('volume', 0.9)  # Volume 0-1
    return engine

def get_response_from_rasa(message):
    """Get a response from Rasa."""
    try:
        response = requests.post('http://localhost:5005/webhooks/rest/webhook', json={"message": message})
        response.raise_for_status()  # Raise an error for bad status codes
        return response.json()[0]['text'] if response.json() else "No response."
    except requests.exceptions.ConnectionError:
        return "Error: Unable to connect to Rasa server. Please make sure it is running."
    except requests.exceptions.RequestException as e:
        return f"An error occurred: {e}"

def speak(engine, text):
    """Convert text to speech."""
    engine.say(text)
    engine.runAndWait()

def listen_for_keyword(keyword="hi isa"):
    """Listen for a specific keyword via text input."""
    print("Type the keyword to proceed:")
    while True:
        phrase = input("You: ").lower()
        if keyword in phrase:
            print(f"Keyword '{keyword}' detected.")
            return

def main():
    engine = init_speech_engine()
    speak(engine, "Isa is ready. Please type 'Hi Isa' to proceed.")

    listen_for_keyword("hi isa")

    speak(engine, "Hello! How can I assist you today?")
    print("You can start chatting with Isa. Type 'exit' to end the conversation.")

    while True:
        user_input = input("You: ")
        if user_input.lower() == "exit":
            speak(engine, "Goodbye!")
            break

        response = get_response_from_rasa(user_input)
        print(f"Isa: {response}")
        speak(engine, response)

if __name__ == "__main__":
    main()

